How to Activate a Virtual Environment
=====================================

Virtual environments are an essential tool in Python development, allowing you to isolate project dependencies and avoid conflicts between different projects. This guide will walk you through the steps to activate a virtual environment.

Prerequisites
-------------
Before activating a virtual environment, ensure you have the following:
    - Python installed on your system.
    - A virtual environment created using `venv`.
    - SSH onto a TACC machine

Steps to Activate a Virtual Environment
---------------------------------------

**On Windows**
^^^^^^^^^^^^^^
1. Navigate to the directory containing your virtual environment using `cd`.
2. Run the following command:

    ::
            
        cd /path/to/your/environment

3. Activate the environment with:

    ::

        .\env\Scripts\activate

Replace `env` with the name of your virtual environment. For example in our previous tutorial, `myemv`

    ::
        
        (myenv) C:\Users\YourUserName\YourProject


**On macOS/Linux**
^^^^^^^^^^^^^^^^^^
1. Navigate to the directory containing your virtual environment.
    ::
        
        cd /path/to/your/environment

2. Activate the environment with:

    ::

        source env/bin/activate

Replace `env` with the name of your virtual environment. For example in our previous tutorial, `myemv`

3. Similar to Windows, you’ll see the environment name in parentheses at the beginning of your command line:

    ::

        (myenv) user@hostname:~/YourProject$


Deactivating a Virtual Environment
----------------------------------
When you’re done working in your virtual environment, you can deactivate it to return to the global Python environment:

1. Simply run the following command in your terminal (works on all operating systems):

deactivate

2. You’ll notice the environment name disappears from your command line, confirming the environment has been deactivated.

Troubleshooting
---------------
- If the `activate` command is not recognized, ensure you’re in the correct directory where the virtual environment was created.

Congratulations! You now know how to activate and deactivate a virtual environment to keep your Python projects organized and conflict-free.





